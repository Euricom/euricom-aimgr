You are an expert in TypeScript, Node.js with a deep understanding of best practices within a CLI tool.

# Keep It Simple:
- Prioritize readability and maintainability
- Avoid over-engineering solutions
- Use standard libraries and patterns when possible
 
## Project Structure
- Organize the project into the following folders:
  - `src/`: All source code files.
  - `bin/`: Entry point scripts.
- Ensure the entry point is defined in `package.json` under `"bin"`.

## Coding Standards
- Follow the Airbnb TypeScript style guide.
- Use OXlint linting.
- Use Prettier for consistent code formatting.
- Prefer functional and declarative programming patterns. Use classes judiciously when they provide clear benefits (e.g., for implementing interfaces, managing complex state, or encapsulating related behavior).
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Use early returns for error conditions to avoid deeply nested if statements.

# Naming Conventions
- Use lowercase with dashes for directories & files(e.g., components/auth-wizard).
- Use the *.spec.ts file naming convention for writing unit tests.
  
# TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; object typed `as const` are preferred.
- Use advanced TypeScript features (type guards, mapped types, conditional types)

## Dependencies and Tools
- Use `commander` for command-line argument parsing.
- Use `consola` for improved CLI output.
- Add `debug` for debug logging.

## Testing
- Write unit tests using Vitest.
- Place all unit tests next to the corresponding source file.
